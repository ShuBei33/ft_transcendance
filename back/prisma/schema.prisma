generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  login           String          @unique
  pseudo          String          @unique
  avatar          String?
  twoFASecret     String?
  is2FAAuthenticated Boolean     @default(false)
  twoFA           Boolean         @default(false)
  status          UserStatus      @default(OFFLINE)
  rank            Int
  money           Int             @default(0)
  channelMember   ChanUsr[]
  channelsMsgs    ChannelMsg[]
  asUser1         Discussion[]    @relation("userOne")
  asUser2         Discussion[]    @relation("userTwo")
  discussionsMsgs DiscussionMsg[]
  receivedInvites Friendship[]    @relation("receivedInvites")
  sentInvites     Friendship[]    @relation("sentInvites")
  leftPlayer      Game[]          @relation("left")
  rightPlayer     Game[]          @relation("right")
  achievements    Achievement[]   @relation("AchievementToUser")
  chromas         Chroma[]        @relation("ChromaToUser")
}

model Friendship {
  id                Int       @id @default(autoincrement())
  inviteStatus      StatusInv @default(PENDING)
  senderId          Int
  receiverId        Int
  countResendSndr   Int       @default(0)
  countResendRcvr   Int       @default(0)
  senderIsBlocked   Boolean   @default(false)
  receiverIsBlocked Boolean   @default(false)
  receiver          User      @relation("receivedInvites", fields: [receiverId], references: [id])
  sender            User      @relation("sentInvites", fields: [senderId], references: [id])
}

model Game {
  id          Int  @id @default(autoincrement())
  lhsPlayerId Int
  lhsScore    Int
  rhsPlayerId Int
  rhsScore    Int
  winnerId    Int
  lhsPlayer   User @relation("left", fields: [lhsPlayerId], references: [id])
  rhsPlayer   User @relation("right", fields: [rhsPlayerId], references: [id])
}

model Chroma {
  id         String  @id @default("")
  fill       String
  isGradient Boolean @default(false)
  price      Int     @default(42)
  ownedBy    User[]  @relation("ChromaToUser")
}

model Achievement {
  id    Int    @id @default(autoincrement())
  title String @unique
  desc  String @unique
  icon  String @unique
  users User[] @relation("AchievementToUser")
}

model Discussion {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  userId1         Int
  userId2         Int
  user1Status     UserStatusMSGs  @default(NORMAL)
  user2Status     UserStatusMSGs  @default(NORMAL)
  user1           User            @relation("userOne", fields: [userId1], references: [id])
  user2           User            @relation("userTwo", fields: [userId2], references: [id])
  discussionsMsgs DiscussionMsg[]
}

model DiscussionMsg {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  content      String
  userId       Int
  discussionId Int
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])
}

model Channel {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  visibility   ChanVisibility
  hash         String?
  channelUsers ChanUsr[]
  channelMsgs  ChannelMsg[]
}

model ChannelMsg {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  userId    Int
  channelId Int
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model ChanUsr {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         Int
  chanId         Int
  role           ChanUsrRole
  status         UserStatusMSGs
  statusDuration Int?
  invitedToChan  StatusInv?
  channel        Channel        @relation(fields: [chanId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id])

  @@unique([userId, chanId])
}

enum StatusInv {
  PENDING
  ACCEPTED
  REJECT
  BLOCKED
}

enum UserStatus {
  OFFLINE
  ONLINE
  BUSY
  INQUEUE
  INGAME
}

enum UserStatusMSGs {
  NORMAL
  MUTED
  BLOCKED
  BANNED
}

enum ChanVisibility {
  PUBLIC
  PROTECTED
  PRIVATE
}

enum ChanUsrRole {
  NORMAL
  ADMIN
  OWNER
}
