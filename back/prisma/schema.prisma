// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER
model User {
	id					Int @id @default(autoincrement())
	createdAt			DateTime @default(now())
	updateAt			DateTime @updatedAt

	login				String @unique
  	pseudo				String @unique
	avatar				String?
	twoFA				Boolean @default(false)
	rank				Int

	friends				UserFriends[] @relation("userToFriend")
	friendOf			UserFriends[] @relation("friendToUser")
	sent				Invitation[] @relation("sender")
	received			Invitation[] @relation("receiver")

	asUser1				Discussion[] @relation("userOne")
	asUser2				Discussion[] @relation("userTwo")
	discussionsMsgs		DiscussionMsg[]

	channelsMsgs		ChannelMsg[]
	channelMember		ChanUsr[]

	achievements		Achievement[]
	leftPlayer			Game[] @relation("left")
	rightPlayer			Game[] @relation("right")
}	

// FRIENDS
model UserFriends {
	id					Int  @id @default(autoincrement())
	userId				Int
	friendId			Int
	user				User @relation(fields: [userId], references: [id], name: "userToFriend")
	friend				User @relation(fields: [friendId], references: [id], name: "friendToUser")

	block				Boolean @default(false) // MUTE LES MSG DISCUSSION

	@@unique([userId, friendId])
}

model Invitation {

	sender				User @relation("sender", fields:[senderId], references: [id])
	senderId			Int
	receiver			User @relation("receiver", fields:[receiverId], references: [id])
	receiverId			Int
	
	inviteStatus 		StatusInv
	
	@@id([senderId, receiverId])
}

enum StatusInv {
	PENDING
	ACCEPTED
	REJECT
}

// GAME 
model Game {
	id					Int @id @default(autoincrement())

	lhsPlayer			User @relation("left", fields:[lhsPlayerId], references: [id])
	lhsPlayerId			Int
	lhsScore			Int
	
	rhsPlayer			User @relation("right", fields:[rhsPlayerId], references: [id])
	rhsPlayerId			Int
	rhsScore			Int

	texture1			String
	texture2			String
}

model Achievement {
	id					Int @id @default(autoincrement())
	title				String @unique
	desc				String @unique
	icon				String @unique
	users				User[]
}

// CHAT - DISCUSSIONS
model Discussion {
	id					Int @id @default(autoincrement())
	createdAt			DateTime @default(now())

	user1				User @relation("userOne", fields:[userId1], references: [id])
	userId1				Int
	user2				User @relation("userTwo", fields:[userId2], references: [id])
	userId2				Int

	discussionsMsgs		DiscussionMsg[]
}

model DiscussionMsg {
	id					Int @id @default(autoincrement())
	createdAt			DateTime @default(now())
	updateAt			DateTime @updatedAt

	content				String

	user				User @relation(fields: [userId], references: [id])
	userId				Int
	discussion			Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
	discussionId		Int
}

// CHAT - CHANNELS
model Channel {
	id					Int @id @default(autoincrement())
	name				String @unique
	createdAt			DateTime @default(now())
	updateAt			DateTime @updatedAt

  	private				Boolean @default(false)
	protected			Boolean @default(false)

	channelUsers		ChanUsr[]
	channelMsgs			ChannelMsg[]

	hash				String? // hash?
}

model ChannelMsg {
	id					Int @id @default(autoincrement())
	createdAt			DateTime @default(now())

	content				String

	user				User @relation(fields: [userId], references: [id])
	userId				Int
	channel				Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
	channelId			Int
}

// CHAT - USER
model ChanUsr {
	id					Int @id @default(autoincrement())
	createdAt			DateTime @default(now())
	updateAt			DateTime @updatedAt

	user				User @relation(fields: [userId], references: [id])
	userId				Int
	channel				Channel @relation(fields: [chanId], references: [id], onDelete: Cascade)
	chanId				Int

	role				ChanUsrRole
	status				ChanUsrStatus
	statusDuration		DateTime
}

enum ChanUsrStatus {
	NORMAL
	MUTED
	BANNED
}

enum ChanUsrRole {
	NORMAL
	ADMIN
	OWNER
}
