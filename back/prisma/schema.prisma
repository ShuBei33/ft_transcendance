// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// USER
model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    login  String  @unique
    pseudo String  @unique
    avatar String?
    twoFA  Boolean @default(false)
	status UserStatus @default(OFFLINE)
    rank   Int

    sentInvites     Friendship[] @relation("sentInvites")
    receivedInvites Friendship[] @relation("receivedInvites")

    asUser1         Discussion[]    @relation("userOne")
    asUser2         Discussion[]    @relation("userTwo")
    discussionsMsgs DiscussionMsg[]

    channelsMsgs  ChannelMsg[]
    channelMember ChanUsr[]

    achievements Achievement[]
    leftPlayer   Game[]        @relation("left")
    rightPlayer  Game[]        @relation("right")
}

// INVITE AND FRIENDS
model Friendship {
    id           Int       @id @default(autoincrement())
    inviteStatus StatusInv @default(PENDING)

    sender     User @relation("sentInvites", fields: [senderId], references: [id])
    senderId   Int
    receiver   User @relation("receivedInvites", fields: [receiverId], references: [id])
    receiverId Int

    countResendSndr     Int      @default(0)
    countResendRcvr     Int      @default(0)
    senderIsBlocked    Boolean   @default(false)
    receiverIsBlocked  Boolean   @default(false)
}

// GAME 
model Game {
    id Int @id @default(autoincrement())

    lhsPlayer   User @relation("left", fields: [lhsPlayerId], references: [id])
    lhsPlayerId Int
    lhsScore    Int

    rhsPlayer   User @relation("right", fields: [rhsPlayerId], references: [id])
    rhsPlayerId Int
    rhsScore    Int

    winnerId Int
}

model Achievement {
    id    Int    @id @default(autoincrement())
    title String @unique
    desc  String @unique
    icon  String @unique
    users User[]
}

// CHAT - DISCUSSIONS
model Discussion {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    user1   User @relation("userOne", fields: [userId1], references: [id])
    userId1 Int
    user2   User @relation("userTwo", fields: [userId2], references: [id])
    userId2 Int

    discussionsMsgs DiscussionMsg[]
}

model DiscussionMsg {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    content String

    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
    discussionId Int
}

// CHAT - CHANNELS
model Channel {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    visibility ChanVisibility

    channelUsers ChanUsr[]
    channelMsgs  ChannelMsg[]

    hash String? // hash?
}

model ChannelMsg {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    content String

    user      User    @relation(fields: [userId], references: [id])
    userId    Int
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
    channelId Int
}

// CHAT - USER
model ChanUsr {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    userId  Int
    channel Channel @relation(fields: [chanId], references: [id], onDelete: Cascade)
    chanId  Int

    role           ChanUsrRole
    status         ChanUsrStatus
    statusDuration DateTime?

    invitedToChan StatusInv?

    @@unique([userId, chanId])
}

enum StatusInv {
    PENDING
    ACCEPTED
    REJECT
    BLOCKED
}

enum UserStatus {
	OFFLINE
	ONLINE
	OCCUPED
	INQUEUE
	INGAME
}

enum ChanVisibility {
    PUBLIC
    PROTECTED
    PRIVATE
}

enum ChanUsrStatus {
    NORMAL
    MUTED
    BANNED
}

enum ChanUsrRole {
    NORMAL
    ADMIN
    OWNER
}
